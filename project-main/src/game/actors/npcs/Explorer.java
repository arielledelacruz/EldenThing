package game.actors.npcs;

import edu.monash.fit2099.engine.actions.ActionList;
import edu.monash.fit2099.engine.actors.Actor;
import edu.monash.fit2099.engine.positions.GameMap;
import game.ExtendedDisplay;
import game.dialogue.Dialogue;
import game.dialogue.DialogueManager;
import game.dialogue.DialogueParsingException;
import game.actions.TalkAction;
import game.actors.DialogueCapable;
import game.behaviours.NPCController;

import java.util.List;

/**
 * An NPC representing "The Explorer", a wise wanderer in the Elden Ring universe.
 * Responds to player questions about the game world in a lore-accurate and immersive manner
 * using JSON-formatted dialogue generated by an LLM.
 *
 * @author Mohanad Al-Mansoob
 */
public class Explorer extends NPC implements DialogueCapable {

    /**
     * The prefix prompt sent to the DialogueManager's LLM, instructing it to generate a lore-rich
     * and immersive JSON dialogue response based on the player's question.
     */
    private static final String EXPLORER_PROMPT_PREFIX = """
    You are "The Explorer", a wise wanderer NPC in Elden Ring Universe.
    
    When a player asks you a question about the game world, you answer in a lore-accurate and immersive way. 
    
    You must respond in this exact strict JSON format:
    
    {
      "options": [["Ask a question"]],
      "responses": [["Your lore-rich response to the player's question."]]
    }
    
    Requirements:
    - Do not ask questions back.
    - The lore response must be fully contained in one string inside the responses array.
    - Use poetic, worldbuilding-friendly language to match a fantasy RPG tone.
    - Assume the player's question comes after this prompt, and answer it directly within the JSON structure.
    
    Player question:
    """;

    /**
     * Controller managing NPC behaviors.
     */
    private NPCController controller;

    /**
     * Manager responsible for generating dialogues from prompts.
     */
    private final DialogueManager dialogueManager;

    /**
     * The current dialogue instance representing the NPC's conversation state.
     */
    private Dialogue dialogue;


    /**
     * Constructs a new Explorer NPC with the specified controller and dialogue manager.
     *
     * @param controller the NPC controller for behavior management
     * @param dialogueManager the dialogue manager used to generate and parse dialogues
     */
    public Explorer(NPCController controller, DialogueManager dialogueManager) {

        super("The Explorer", 'E', 45, controller);
        this.controller = controller;
        this.dialogueManager = dialogueManager;
        resetDialogue();

    }

    /**
     * Returns the current dialogue instance representing the NPC's conversation state.
     *
     * @return the current Dialogue object
     */
    @Override
    public Dialogue getCurrentDialogue() {
        return this.dialogue;

    }


    /**
     * Resets the dialogue state with a stub greeting to initiate interaction.
     * The placeholder dialogue will be overwritten once the player asks a real question.
     */
    @Override
    public void resetDialogue() {
        // This is a "stub" greeting just to start the interaction
        this.dialogue = new Dialogue(
                List.of(List.of("Hey Explorer, can I ask you something?")),
                List.of(List.of("")) // Placeholder; overwritten after first real question
        );
    }

    /**
     * Handles the player's dialogue choice by prompting the player to enter a question.
     * Sends the question appended to the prompt prefix to the DialogueManager to generate a new dialogue.
     *
     * @param optionIndex the index of the chosen dialogue option (ignored here as input is requested)
     * @return the lore-rich response generated for the player's question, or an error message if generation fails
     */
    @Override
    public String handleDialogueChoice(int optionIndex) {

        ExtendedDisplay reader = new ExtendedDisplay();
        String input = reader.readLine("Enter Question:");

        String prompt = EXPLORER_PROMPT_PREFIX + input;

        resetDialogue();

        try {

            Dialogue newDialogue = dialogueManager.generateDialogue(prompt);
            return newDialogue.getResponseFor(0);

        } catch (DialogueParsingException e) {
            return "The Explorer blinks, unsure how to respond.";
        }

    }

    /**
     * Returns the list of allowable actions this NPC can perform in the given context,
     * which includes TalkActions for each current dialogue option.
     *
     * @param actor the actor performing the action
     * @param direction the direction of the NPC relative to the actor
     * @param map the game map context
     * @return a list of allowable actions
     */
    @Override
    public ActionList allowableActions(Actor actor, String direction, GameMap map) {
        ActionList actions = super.allowableActions(actor, direction, map);

        for (int i = 0; i < dialogue.getCurrentOptions().size(); i++) {
            actions.add(new TalkAction(this, i));
        }

        return actions;

    }
}
